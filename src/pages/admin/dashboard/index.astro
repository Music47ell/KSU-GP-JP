---
import { supabase } from "../../../lib/supabase";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import Header from "../../../components/seeker/Header.astro";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
	return redirect("/");
}

const { data, error } = await supabase.auth.setSession({
	refresh_token: refreshToken.value,
	access_token: accessToken.value,
});

if (error) {
	cookies.delete("sb-access-token", {
		path: "/",
	});
	cookies.delete("sb-refresh-token", {
		path: "/",
	});

	return redirect("/");
}

const { data: admin } = await supabase
	.from("admins")
	.select("user_id, name")
	.eq("user_id", data?.user?.id)
	.single();

const { data: jobListings, error: listingsError } = await supabase
	.from("job_listings")
	.select("*");

const { data: ownerData } = await supabase.from("owner").select("*");
---

<BaseLayout>
	<div class="flex-grow container mx-auto px-4">
		<Header title="Admin Dashboard" />
		<div class="mt-4">
			<div class="mt-8">
				<table class="w-full mt-4">
					<tbody>
						<tr class="border bg-gray-100">
							<td class="px-4 py-2 border font-semibold">Name:</td>
							<td class="px-4 py-2 border">{admin?.name}</td>
						</tr>
					</tbody>
				</table>
			</div>
			<hr class="my-4 border-t border-gray-300" />
			{
				listingsError ? (
					<p class="text-red-500 mt-4">
						There was an error fetching your job listings.
					</p>
				) : (
					<div class="mt-4">
						<h2 class="text-xl font-bold">Waiting for approval</h2>
						<div class="mt-2">
							<table class="w-full mt-4">
								<thead>
									<tr>
										<th class="px-4 py-2 border">Title</th>
										<th class="px-4 py-2 border">Description</th>
										<th class="px-4 py-2 border">Tags</th>
										<th class="px-4 py-2 border">Company</th>
										<th class="px-4 py-2 border">Job Expires</th>
										<th class="px-4 py-2 border">Status</th>
										<th class="px-4 py-2 border">Approve</th>
									</tr>
								</thead>
								<tbody>
									{jobListings.map((job) => {
										const owner = ownerData?.find(
											(owner) => owner?.user_id === job?.owner_id
										);

										// Parse the ISO string into a Date object
										const date = new Date(job?.time);

										// Explicitly type the options to help TypeScript recognize them
										const options: Intl.DateTimeFormatOptions = {
											year: "numeric",
											month: "long",
											day: "numeric",
											hour: "2-digit",
											minute: "2-digit",
											second: "2-digit",
											timeZone: "Europe/Istanbul",
											timeZoneName: "short",
										};

										// Format the date
										const formattedDate = new Intl.DateTimeFormat(
											"tr-TR",
											options
										).format(date);

										return (
											<tr class="border">
												<td class="px-4 py-2 border">{job?.title}</td>
												<td class="px-4 py-2 border">{job?.description}</td>
												<td class="px-4 py-2 border">{job?.tags.join(", ")}</td>
												<td class="px-4 py-2 border">{owner?.company}</td>
												<td class="px-4 py-2 border">{formattedDate}</td>
												<td class="px-4 py-2 border">{job?.approved}</td>
												<td class="px-4 py-2 border">
													<a
														href={`/job/approve/${job?.id}`}
														class="text-blue-500"
													>
														Edit
													</a>
												</td>
											</tr>
										);
									})}
								</tbody>
							</table>
						</div>
					</div>
				)
			}
		</div>
	</div>
</BaseLayout>
